#include <stdio.h>
#include <stdlib.h>

#define MAX 100

// Function for FCFS Disk Scheduling
void fcfs(int requests[], int n, int head) {
    int total_seek_time = 0;
    
    printf("\nFCFS Disk Scheduling\n");
    printf("Seek Sequence: %d", head);
    
    for (int i = 0; i < n; i++) {
        total_seek_time += (requests[i] > head ? requests[i] - head : head - requests[i]);
        head = requests[i];
        printf(" -> %d", head);
    }
    
    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

// Function for SSTF Disk Scheduling
void sstf(int requests[], int n, int head) {
    int total_seek_time = 0, completed[MAX] = {0}, diff, index;
    
    printf("\nSSTF Disk Scheduling\n");
    printf("Seek Sequence: %d", head);
    
    for (int i = 0; i < n; i++) {
        int min_diff = 9999;
        
        for (int j = 0; j < n; j++) {
            if (!completed[j]) {
                diff = requests[j] - head;
                if (diff < 0) diff = -diff; // Taking the absolute difference
                if (diff < min_diff) {
                    min_diff = diff;
                    index = j;
                }
            }
        }
        
        total_seek_time += (requests[index] > head ? requests[index] - head : head - requests[index]);
        head = requests[index];
        completed[index] = 1;
        printf(" -> %d", head);
    }
    
    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

// Function for SCAN Disk Scheduling
void scan(int requests[], int n, int head, int direction, int disk_size) {
    int total_seek_time = 0, temp, requests_sorted[MAX], i, j;
    
    // Copy the request array and add start(0) and end(disk_size-1) of the disk
    for (i = 0; i < n; i++) {
        requests_sorted[i] = requests[i];
    }
    requests_sorted[n] = 0;
    requests_sorted[n+1] = disk_size - 1;
    n += 2;
    
    // Sort the request array
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (requests_sorted[i] > requests_sorted[j]) {
                temp = requests_sorted[i];
                requests_sorted[i] = requests_sorted[j];
                requests_sorted[j] = temp;
            }
        }
    }
    
    // Find the position of the head
    int head_index;
    for (i = 0; i < n; i++) {
        if (requests_sorted[i] > head) {
            head_index = i;
            break;
        }
    }

    printf("\nSCAN Disk Scheduling\n");
    printf("Seek Sequence: %d", head);

    if (direction == 0) {
        for (i = head_index - 1; i >= 0; i--) {
            total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
        for (i = head_index; i < n; i++) {
            total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
    } else {
        for (i = head_index; i < n; i++) {
            total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
        for (i = head_index - 1; i >= 0; i--) {
            total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
    }

    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

// Function for LOOK Disk Scheduling
void look(int requests[], int n, int head, int direction) {
    int total_seek_time = 0, temp, requests_sorted[MAX], i, j;

    for (i = 0; i < n; i++) {
        requests_sorted[i] = requests[i];
    }

    // Sort the requests
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (requests_sorted[i] > requests_sorted[j]) {
                temp = requests_sorted[i];
                requests_sorted[i] = requests_sorted[j];
                requests_sorted[j] = temp;
            }
        }
    }

    // Find the position of the head
    int head_index;
    for (i = 0; i < n; i++) {
        if (requests_sorted[i] > head) {
            head_index = i;
            break;
        }
    }

    printf("\nLOOK Disk Scheduling\n");
    printf("Seek Sequence: %d", head);

    if (direction == 0) {
        for (i = head_index - 1; i >= 0; i--) {
            total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
        for (i = head_index; i < n; i++) {
            total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
    } else {
        for (i = head_index; i < n; i++) {
            total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
        for (i = head_index - 1; i >= 0; i--) {
            total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
            head = requests_sorted[i];
            printf(" -> %d", head);
        }
    }

    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

// Function for C-SCAN Disk Scheduling
void cscan(int requests[], int n, int head, int disk_size) {
    int total_seek_time = 0, temp, requests_sorted[MAX], i, j;

    for (i = 0; i < n; i++) {
        requests_sorted[i] = requests[i];
    }
    requests_sorted[n] = 0;
    requests_sorted[n+1] = disk_size - 1;
    n += 2;

    // Sort the requests
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (requests_sorted[i] > requests_sorted[j]) {
                temp = requests_sorted[i];
                requests_sorted[i] = requests_sorted[j];
                requests_sorted[j] = temp;
            }
        }
    }

    // Find the position of the head
    int head_index;
    for (i = 0; i < n; i++) {
        if (requests_sorted[i] > head) {
            head_index = i;
            break;
        }
    }

    printf("\nC-SCAN Disk Scheduling\n");
    printf("Seek Sequence: %d", head);

    for (i = head_index; i < n; i++) {
        total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
        head = requests_sorted[i];
        printf(" -> %d", head);
    }

    for (i = 0; i < head_index; i++) {
        total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
        head = requests_sorted[i];
        printf(" -> %d", head);
    }

    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

// Function for C-LOOK Disk Scheduling
void clook(int requests[], int n, int head) {
    int total_seek_time = 0, temp, requests_sorted[MAX], i, j;

    for (i = 0; i < n; i++) {
        requests_sorted[i] = requests[i];
    }

    // Sort the requests
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (requests_sorted[i] > requests_sorted[j]) {
                temp = requests_sorted[i];
                requests_sorted[i] = requests_sorted[j];
                requests_sorted[j] = temp;
            }
        }
    }

    // Find the position of the head
    int head_index;
    for (i = 0; i < n; i++) {
        if (requests_sorted[i] > head) {
            head_index = i;
            break;
        }
    }

    printf("\nC-LOOK Disk Scheduling\n");
    printf("Seek Sequence: %d", head);

    for (i = head_index; i < n; i++) {
        total_seek_time += (requests_sorted[i] > head ? requests_sorted[i] - head : head - requests_sorted[i]);
        head = requests_sorted[i];
        printf(" -> %d", head);
    }

    for (i = 0; i < head_index; i++) {
        total_seek_time += (head > requests_sorted[i] ? head - requests_sorted[i] : requests_sorted[i] - head);
        head = requests_sorted[i];
        printf(" -> %d", head);
    }

    printf("\nTotal Seek Time: %d\n", total_seek_time);
}

int main() {
    int requests[MAX], n, head, choice, direction, disk_size;

    printf("Enter the number of disk requests: ");
    scanf("%d", &n);

    printf("Enter the disk requests:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("Enter the disk size (maximum cylinder number): ");
    scanf("%d", &disk_size);

    while (1) {
        printf("\nDisk Scheduling Algorithms Menu:\n");
        printf("1. FCFS\n");
        printf("2. SSTF\n");
        printf("3. SCAN\n");
        printf("4. LOOK\n");
        printf("5. C-SCAN\n");
        printf("6. C-LOOK\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                fcfs(requests, n, head);
                break;
            case 2:
                sstf(requests, n, head);
                break;
            case 3:
                printf("Enter direction (0 for left, 1 for right): ");
                scanf("%d", &direction);
                scan(requests, n, head, direction, disk_size);
                break;
            case 4:
                printf("Enter direction (0 for left, 1 for right): ");
                scanf("%d", &direction);
                look(requests, n, head, direction);
                break;
            case 5:
                cscan(requests, n, head, disk_size);
                break;
            case 6:
                clook(requests, n, head);
                break;
            case 7:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
    }

    return 0;
}
