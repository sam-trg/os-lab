#include <stdio.h>
#include <stdlib.h>

#define TOTAL_PROCESS 5

typedef struct {
    int at, bt, pr, pno;
} Process;

Process proc[50];

int compare(const void *a, const void *b) {
    Process *pa = (Process *)a;
    Process *pb = (Process *)b;

    if (pa->at == pb->at) {
        return pb->pr - pa->pr; // descending order of priority
    } else {
        return pa->at - pb->at; // ascending order of arrival time
    }
}

void get_wt_time(int wt[]) {
    int service[50];
    service[0] = proc[0].at;
    wt[0] = 0;

    for (int i = 1; i < TOTAL_PROCESS; i++) {
        service[i] = proc[i - 1].bt + service[i - 1];
        wt[i] = service[i] - proc[i].at;

        if (wt[i] < 0) {
            wt[i] = 0;
        }
    }
}

void get_tat_time(int tat[], int wt[]) {
    for (int i = 0; i < TOTAL_PROCESS; i++) {
        tat[i] = proc[i].bt + wt[i];
    }
}

void findgc() {
    int wt[50], tat[50];
    double wavg = 0, tavg = 0;

    get_wt_time(wt);
    get_tat_time(tat, wt);

    int stime[50], ctime[50];
    stime[0] = proc[0].at;
    ctime[0] = stime[0] + tat[0];

    for (int i = 1; i < TOTAL_PROCESS; i++) {
        stime[i] = ctime[i - 1];
        ctime[i] = stime[i] + tat[i] - wt[i];
    }

    printf("Process_no\tStart_time\tComplete_time\tTurn_Around_Time\tWaiting_Time\n");

    for (int i = 0; i < TOTAL_PROCESS; i++) {
        wavg += wt[i];
        tavg += tat[i];

        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", proc[i].pno, stime[i], ctime[i], tat[i], wt[i]);
    }

    printf("Average waiting time is : %.2f\n", wavg / (float)TOTAL_PROCESS);
    printf("Average turnaround time : %.2f\n", tavg / (float)TOTAL_PROCESS);
}

int main() {
    int arrivaltime[] = {1, 2, 3, 4, 5};
    int bursttime[] = {3, 5, 1, 7, 4};
    int priority[] = {3, 4, 1, 7, 8};

    for (int i = 0; i < TOTAL_PROCESS; i++) {
        proc[i].at = arrivaltime[i];
        proc[i].bt = bursttime[i];
        proc[i].pr = priority[i];
        proc[i].pno = i + 1;
    }

    qsort(proc, TOTAL_PROCESS, sizeof(Process), compare);

    findgc();

    return 0;
}
